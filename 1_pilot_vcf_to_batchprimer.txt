
################################################################
############# select regions for primer search #################
################################################################

### subset initial pilot VCF (Schwabl et al. 2019, Nat. Commun.) to include only sites which show 2+ homozygous '1/1' genotypes and no other types of non-reference polymorphism

egrep '#|1\/1\:.*1\/1\:' PILOT.vcf | egrep -v '0\/[1-3]\:' | egrep -v '[1-3]\/[2-3]\:' > PILOT_FIX11.vcf

### subset initial pilot VCF to include only sites which show 2+ heterozygous '0/1' genotypes and no other types of non-reference polymorphism

egrep '#|0\/1\:.*0\/1\:' PILOT.vcf | egrep -v '0\/[2-3]\:' | egrep -v '[1-3]\/[1-3]\:' > PILOT_FIX01.vcf

### filter out these polymorphism-limited sites by 'VCF subtraction'

bedtools subtract -a PILOT.vcf -b PILOT_FIX11.vcf -header > PILOT_noFIX11.vcf

bedtools subtract -a PILOT_noFIX11.vcf -b PILOT_FIX01.vcf -header > PILOT_noFIX11_noFIX01.vcf

### infer core-regions in T. cruzi genome based on orthology to sister genus Leishmania

### convert orthology search output from TriTrypDB (https://tritrypdb.org/tritrypdb/showQuestion.do?questionFullName=GeneQuestions.GenesByOrthologPattern) to .bed list

egrep -v '#' /home/philipp/r15/GenesByOrthologPattern.gff | awk '{print $1"\t"$4+40"\t"$5-39}' | uniq > Lmajor_ortho_regions.bed ### trim orthology segments by 40 nt

### sort SNPs from filtered VCF into 80 nt bins

/opt/Soft/vcftools_0.1.13/bin/vcftools --vcf PILOT_noFIX11_noFIX01.vcf --SNPdensity 80 --out PILOT_noFIX11_noFIX01

### use loop to filter out bins with  1 - 5 of SNPs

for i in {1,2,3,4,5}; do

awk '($3 == '$i')' PILOT_noFIX11_noFIX01.snpden | awk '{print $1"\t"$2"\t"$2+79}' | sed '1d' > temp_"$i"snp_80nt_windows.bed 

### find bins from previous step that coincide with trimmed orthology segments

bedtools intersect -a Lmajor_ortho_regions.bed -b temp_"$i"snp_80nt_windows.bed | awk '($3-$2 == 79)' > temp_"$i"snp_80nt_ortho_windows.bed

### print command that extracts these core-region bins from reference fasta 

awk -F "\t" '{print "samtools faidx /home/philipp/scripts/compile_reference_from_genbank/TriTrypDB-32_TcruziSylvioX10-1_Genome.fasta "$1":"$2-40"-"$3+40" > target_XXX.txt"}' temp_"$i"snp_80nt_ortho_windows.bed | gawk 'BEGIN{ RS = "XXX" } { printf  "%s%d", $0, ++c }' | sed '$ d' > make_"$i"snp_multiplex_targets.txt

### run command

bash ./make_"$i"snp_multiplex_targets.txt

### concatenate fasta output

cat $(find ./ -name "target_*" | sort -V) > "$i"snp_multiplex_targets.fasta

\rm target_*.txt
\rm temp_*
\rm make_*

done

### repeat for bins with  6+ SNPs

awk '($3 > 5)' PILOT_noFIX11_noFIX01.snpden | awk '{print $1"\t"$2"\t"$2+79}' | sed '1d' > temp_6plus_80nt_windows.bed 

### find bins from previous step that coincide with trimmed orthology segments

bedtools intersect -a Lmajor_ortho_regions.bed -b temp_6plus_80nt_windows.bed | awk '($3-$2 == 79)' > temp_6plus_80nt_ortho_windows.bed

### print command that extracts these core-region bins from reference fasta 

awk -F "\t" '{print "samtools faidx /home/philipp/scripts/compile_reference_from_genbank/TriTrypDB-32_TcruziSylvioX10-1_Genome.fasta "$1":"$2-40"-"$3+40" > target_XXX.txt"}' temp_6plus_80nt_ortho_windows.bed | gawk 'BEGIN{ RS = "XXX" } { printf  "%s%d", $0, ++c }' | sed '$ d' > make_6plus_multiplex_targets.txt

### run command

bash ./make_6plus_multiplex_targets.txt

### concatenate fasta output

cat $(find ./ -name "target_*" | sort -V) > 6plus_multiplex_targets.fasta

\rm target_*.txt
\rm temp_*
\rm make_*

### more cleanup

\rm *.vcf
\rm *.bed
\rm *.log
\rm *.snpden

### count targets

grep -c ">" *_multiplex_targets.fasta

### 1snp_multiplex_targets.fasta:4413
### 2snp_multiplex_targets.fasta:1066
### 3snp_multiplex_targets.fasta:400
### 4snp_multiplex_targets.fasta:202
### 5snp_multiplex_targets.fasta:94
### 6plus_multiplex_targets.fasta:84

### split into files with 500 sequences each (+ remainder) to create input for BatchPrimer3

awk 'BEGIN {n_seq=0;} /^>/ {if(n_seq%500==0){file=sprintf("1snp_multiplex_targets_%d.fasta",n_seq);} print >> file; n_seq++; next;} { print >> file; }' < 1snp_multiplex_targets.fasta

awk 'BEGIN {n_seq=0;} /^>/ {if(n_seq%500==0){file=sprintf("2snp_multiplex_targets_%d.fasta",n_seq);} print >> file; n_seq++; next;} { print >> file; }' < 2snp_multiplex_targets.fasta

cat {4,5,6}*multiplex_targets.fasta > 4plus_multiplex_targets_0.fasta

cp 3snp_multiplex_targets.fasta 3snp_multiplex_targets_0.fasta

